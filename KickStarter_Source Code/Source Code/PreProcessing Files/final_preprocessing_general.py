# -*- coding: utf-8 -*-
"""FINAL_preprocessing_general.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x00YR01uU-pQDhVLra3wX0WMNvhPIupq
"""

from google.colab import drive
drive.mount('/content/gdrive')

!cp "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general.csv" "/content/kickstarter-general.csv"

!mkdir "/content/gdrive/My Drive/Datasets/"
!mkdir "/content/gdrive/My Drive/Datasets/kickstarter-statistics-info/"

import pandas as pd
import numpy as np
import sklearn as skl
import matplotlib.pyplot as plt 
import datetime
import tensorflow as tf

df = pd.read_csv("kickstarter-general.csv")

df = df[['ID', 'category', 'main_category','currency','deadline', 'goal', 'launched',
         'pledged', 'state', 'backers', 'country']]

df['deadline']= pd.to_datetime(df['deadline'])
df['launched']= pd.to_datetime(df['launched'])
df

day=[]
pd.Series.dt.day

df['dealine_day'] = df['deadline'].dt.day
pd.Series.dt.month 
df['deadline_month'] = df['deadline'].dt.month

pd.Series.dt.year 
df['deadline_year'] = df['deadline'].dt.year

day=[]
pd.Series.dt.day

df['launched_day'] = df['launched'].dt.day
pd.Series.dt.month 
df['launched_month'] = df['launched'].dt.month

pd.Series.dt.year 
df['launched_year'] = df['launched'].dt.year

df = df.set_index("state")
df = df.drop(['canceled', 'live', 'undefined', 'suspended'], axis=0)

df = df.reset_index()

df

"""# **Unique values function**"""

def unique(list1): 
  
    # intilize a null list 
    unique_list = [] 
      
    # traverse for all elements 
    for x in list1: 
        # check if exists in unique_list or not 
        if x not in unique_list: 
            unique_list.append(x) 
        
    return unique_list

unique(df["currency"])

"""# ***Load the arrays if preprocessing has already been done***"""

state = np.load('/content/gdrive/My Drive/Datasets/kickstarter-general-info/state.npy')
main_category = np.load('/content/gdrive/My Drive/Datasets/kickstarter-general-info/main_category.npy')
category = np.load('/content/gdrive/My Drive/Datasets/kickstarter-general-info/category.npy')
country = np.load('/content/gdrive/My Drive/Datasets/kickstarter-general-info/country.npy')
currency = np.load('/content/gdrive/My Drive/Datasets/kickstarter-general-info/currency.npy')
duration = np.load('/content/gdrive/My Drive/Datasets/kickstarter-general-info/duration.npy')

"""# **Preprocessing Starts! (Execute below cells if you are doing for the first time)**"""

state = []

for i in range(0,len(df)):
  if(df.state[i]=="failed"):
    state.append(0)
  else:
    state.append(1)
    
print(state)

main_category =[]

unique_list = unique(df["main_category"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["main_category"][i]==unique_list[j]):
      main_category.append(j)
      
print(main_category)

category =[]

unique_list = unique(df["category"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["category"][i]==unique_list[j]):
      category.append(j)
      
print(category)

country =[]

unique_list = unique(df["country"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["country"][i]==unique_list[j]):
      country.append(j)
      
print(country)

currency =[]

unique_list = unique(df["currency"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["currency"][i]==unique_list[j]):
      currency.append(j)
      
print(currency)

duration=[]

for i in range (0,len(df)):
  if (df.iloc[i][13] > df.iloc[i][16]):
    n_months = 12 + df.iloc[i][12] - df.iloc[i][15]
    duration_temp = 30 - df.iloc[i][14] + (n_months-1)*31 + df.iloc[i][11]
  else:
    n_months = df.iloc[i][12] - df.iloc[i][15]
    duration_temp = 30 - df.iloc[i][14] + (n_months-1)*31 + df.iloc[i][11]
  duration.append(duration_temp)
      
print(duration)

np.save('/content/gdrive/My Drive/Datasets/kickstarter-general-info/state.npy', state)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-general-info/main_category.npy', main_category)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-general-info/category.npy', category)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-general-info/country.npy', country)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-general-info/currency.npy', currency)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-general-info/duration.npy', duration)

"""# **Merging the arrays into the main dataframe**"""

df_temp = df[['ID', 'goal', 'pledged','backers' ]]

data = {'ID': df_temp["ID"], 'state': state, 'category': category,
        'main category': main_category, 'country': country, 'currency': currency, 'duration': duration}

df_array = pd.DataFrame(data)
df_final = pd.merge(df_temp,df_array,on="ID")

"""# **Removing null and negative values from the final dataset**"""

df_final = df_final.fillna(99999)
df_final[df_final < 0] = 0

df_final.corr()

"""# OUTLIER DETECTION:

Enter the number of rounds of Outlier Removal to be performed below:
"""

n_rounds = 3

def find_anomalies(random_data):
    anomalies =[]
    
    # Set upper and lower limit to 3 standard deviation
    random_data_std = np.std(random_data)
    random_data_mean = np.mean(random_data)
    anomaly_cut_off = random_data_std * 3
    
    lower_limit  = random_data_mean - anomaly_cut_off 
    upper_limit = random_data_mean + anomaly_cut_off
    #print(lower_limit)
    # Generate outliers
    for outlier in random_data:
        if outlier > upper_limit or outlier < lower_limit:
            anomalies.append(outlier)
    return anomalies

for i in range(n_rounds):
  # 1: GOAL

  temp = unique(find_anomalies(df_final['goal']))

  df_final = df_final.set_index("goal")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()


  # 3: DURATION

  temp = unique(find_anomalies(df_final['duration']))

  df_final = df_final.set_index("duration")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()









  # # 2: COUNTRY

  # temp = unique(find_anomalies(df_final['country']))

  # df_final = df_final.set_index("country")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # # 3: category

  # temp = unique(find_anomalies(df_final['category']))

  # df_final = df_final.set_index("category")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # # 3: main category

  # temp = unique(find_anomalies(df_final['main category']))

  # df_final = df_final.set_index("main category")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # # 3: currency

  # temp = unique(find_anomalies(df_final['currency']))

  # df_final = df_final.set_index("currency")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()


  print('ROUND ', i+1)
  print('Number of rows left in the dataset: ', len(df_final))

df_final.corr()

#           ID	      goal	pledged	    backers	  state	    category  main category	  country	    currency	    duration
# state	-0.000722	-0.025099	0.109507	0.125790	1.000000	  -0.041316	 -0.037480	    -0.050306	  -0.056377	    -0.115071

#                     goal	 pledged	backers	   state	   category	main category	 country	currency	duration
# state	          -0.152694	0.138064	0.131692	1.000000	-0.040005 	-0.029038	  -0.043911	-0.049036	-0.102020

#                 -0.175541	-0.000742	0.142079	1.000000	-0.039632	-0.033942	-0.046109	-0.051281	-0.108524

"""# **Implementing Classifier**"""

a = df_final['goal'].values
b = df_final['category'].values
c = df_final['main category'].values
d = df_final['country'].values
e = df_final['currency'].values
f = df_final['duration'].values

X = np.array([a,b,c,d,e,f])
X = X.transpose()
print(X.shape)

np.savetxt("kickstarter_general_inputs.csv", X, delimiter=",")
!cp "/content/kickstarter_general_inputs.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_inputs.csv"

s = df_final['state'].values
y = np.array([s])
y = y.transpose()
y = y.ravel()
print(y.shape)

np.savetxt("kickstarter_general_labels.csv", y, delimiter=",")
!cp "/content/kickstarter_general_labels.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_labels.csv"

"""# ***Generating a csv file of all the final values to be used***"""

data_final = {'goal': a, 'category': b,
        'main category': c, 'country': d, 'currency': e, 'duration': f, 'state': s}

data_final_lr = {'goal': a, 'pledged': df_final['pledged'].values, 'backers': df_final['backers'].values, 'category': b,
        'main category': c, 'country': d, 'currency': e, 'duration':f, 'state': s}

df_array_final = pd.DataFrame(data_final)
df_array_final_sample = df_array_final.head(1000)

df_array_final_lr = pd.DataFrame(data_final_lr)
df_array_final_lr_sample = df_array_final_lr.head(1000)

df_array_final_lr.to_csv (r'kickstarter_general_final_lr_header.csv', index = False, header=True)
df_array_final_lr_sample.to_csv (r'kickstarter_general_final_lr_sample_header.csv', index = False, header=True)

df_array_final.to_csv (r'kickstarter_general_final.csv', index = False, header=False)
df_array_final_sample.to_csv (r'kickstarter_general_final_sample.csv', index = False, header=False)

df_array_final.to_csv (r'kickstarter_general_final_header.csv', index = False, header=True)
df_array_final_sample.to_csv (r'kickstarter_general_final_sample_header.csv', index = False, header=True)

!cp "/content/kickstarter_general_final.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_final.csv"
!cp "/content/kickstarter_general_final_sample.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_final_sample.csv"

!cp "/content/kickstarter_general_final_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_final_header.csv"
!cp "/content/kickstarter_general_final_sample_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_final_sample_header.csv"

!cp "/content/kickstarter_general_final_lr_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_final_lr_header.csv"
!cp "/content/kickstarter_general_final_lr_sample_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-general-info/kickstarter_general_final_lr_sample_header.csv"