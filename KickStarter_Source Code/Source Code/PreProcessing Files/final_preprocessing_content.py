# -*- coding: utf-8 -*-
"""FINAL_preprocessing_content.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fRjp1G-OBBqr5AvqzFIv3tlntyZwmzUz
"""

from google.colab import drive
drive.mount('/content/gdrive')

!cp "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content.csv" "/content/kickstarter-content.csv"

!mkdir "/content/gdrive/My Drive/Datasets/"
!mkdir "/content/gdrive/My Drive/Datasets/kickstarter-content-info/"

import pandas as pd
import numpy as np
import sklearn as skl
import matplotlib.pyplot as plt

df = pd.read_csv("kickstarter-content.csv")

df = df[['Id','State', 'Currency', 'Top Category', 'Category',
       'Updates', 'Comments', 'Rewards', 'Goal',
       'Pledged', 'Backers', 'Duration in Days',
       'Facebook Connected', 'Facebook Friends', 'Facebook Shares',
       'Has Video', 'Creator Website',
       'Creator - # Projects Created', 'Creator - # Projects Backed',
       '# Videos', '# Images', '# Words (Description)',
       '# Words (Risks and Challenges)', '# FAQs']]
df

"""# **Unique values function**"""

def unique(list1): 
  
    # intilize a null list 
    unique_list = [] 
      
    # traverse for all elements 
    for x in list1: 
        # check if exists in unique_list or not 
        if x not in unique_list: 
            unique_list.append(x) 
        
    return unique_list

"""# ***Load the arrays if preprocessing has already been done***"""

state = np.load('/content/gdrive/My Drive/Datasets/kickstarter-content-info/state.npy')
top_category = np.load('/content/gdrive/My Drive/Datasets/kickstarter-content-info/top_category.npy')
category = np.load('/content/gdrive/My Drive/Datasets/kickstarter-content-info/category.npy')
facebook_connected = np.load('/content/gdrive/My Drive/Datasets/kickstarter-content-info/facebook_connected.npy')
currency = np.load('/content/gdrive/My Drive/Datasets/kickstarter-content-info/currency.npy')
has_video = np.load('/content/gdrive/My Drive/Datasets/kickstarter-content-info/has_video.npy')
creator_website = np.load('/content/gdrive/My Drive/Datasets/kickstarter-content-info/creator_website.npy')

"""# **Preprocessing Starts!**"""

#LABELS ARE: 'successful'=1, 'failed'=0

state =[]

for i in range(0,len(df)):
  if(df.State[i]=="successful"):
    state.append(1)
  else:
    state.append(0)
    
print(state)

currency =[]

unique_list = unique(df["Currency"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["Currency"][i]==unique_list[j]):
      currency.append(j)

print(currency)

#LABELS ARE: 'Art'=0, 'Film & Video'=1, 'Fashion'=2, 'Publishing'=3, 'Design'=4, 'Technology'=5, 'Photography'=6, 'Food'=7, 'Music'=8, 'Journalism'=9, 'Games'=10,
#            'Theater'=11, 'Crafts'=12, 'Comics'=13, 'Dance'=14

top_category =[]

unique_list = unique(df["Top Category"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["Top Category"][i]==unique_list[j]):
      top_category.append(j)

print(top_category)

category =[]

unique_list = unique(df["Category"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["Category"][i]==unique_list[j]):
      category.append(j)
      
print(category)

facebook_connected =[]

unique_list = unique(df["Facebook Connected"])

for i in range(0,len(df)):
  for j in range(0, len(unique_list)):
    if(df["Facebook Connected"][i]==unique_list[j]):
      facebook_connected.append(j)
      
print(facebook_connected)

has_video =[]

has_video_unique_list = unique(df["Has Video"])

for i in range(0,len(df)):
  for j in range(0, len(has_video_unique_list)):
    if(df["Has Video"][i]==has_video_unique_list[j]):
      has_video.append(j)
      
print(has_video)

creator_website =[]

df['Creator Website'] = df['Creator Website'].fillna(0)

for i in range(0, len(df)):
  if((df["Creator Website"][i]) == 0):
    creator_website.append(0)
  else:
    creator_website.append(1)
    
print(creator_website)

np.save('/content/gdrive/My Drive/Datasets/kickstarter-content-info/state.npy', state)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-content-info/top_category.npy', top_category)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-content-info/category.npy', category)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-content-info/facebook_connected.npy', facebook_connected)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-content-info/currency.npy', currency)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-content-info/has_video.npy', has_video)
np.save('/content/gdrive/My Drive/Datasets/kickstarter-content-info/creator_website.npy', creator_website)

"""# **Merging the arrays into the main dataframe**"""

df_temp = df[['Id', 'Updates', 'Comments', 'Rewards', 'Goal', 'Pledged', 'Backers', 'Duration in Days', 'Facebook Friends', 'Facebook Shares',
              'Creator - # Projects Created', 'Creator - # Projects Backed', '# Videos', '# Images', '# Words (Description)', '# Words (Risks and Challenges)', '# FAQs']]

data = {'Id': df_temp["Id"], 'State': state, 'Currency': currency, 'Top Category': top_category, 'Category': category, 'Facebook Connected': facebook_connected,
        'Has Video': has_video,  'Creator Website': creator_website}

df_array = pd.DataFrame(data)
df_final = pd.merge(df_temp,df_array,on="Id")

"""# **Removing null values from the final dataset**"""

df_final = df_final.fillna(99999)

df_final.corr()

"""## ***OUTLIER DETECTION:***

Enter the number of rounds of Outlier Removal to be performed below:
"""

n_rounds = 5

def find_anomalies(random_data):
    anomalies =[]
    
    # Set upper and lower limit to 3 standard deviation
    random_data_std = np.std(random_data)
    random_data_mean = np.mean(random_data)
    anomaly_cut_off = random_data_std * 3
    
    lower_limit  = random_data_mean - anomaly_cut_off 
    upper_limit = random_data_mean + anomaly_cut_off
    #print(lower_limit)
    # Generate outliers
    for outlier in random_data:
        if outlier > upper_limit or outlier < lower_limit:
            anomalies.append(outlier)
    return anomalies

for i in range(n_rounds):
  # 1: GOAL

  temp = unique(find_anomalies(df_final['Goal']))

  df_final = df_final.set_index("Goal")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()

  # 2: DURATION

  temp = unique(find_anomalies(df_final['Duration in Days']))

  df_final = df_final.set_index("Duration in Days")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()

  # # 3: REWARDS

  # temp = unique(find_anomalies(df_final['Rewards']))

  # df_final = df_final.set_index("Rewards")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # 3: Facebook Friends

  temp = unique(find_anomalies(df_final['Facebook Friends']))

  df_final = df_final.set_index("Facebook Friends")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()

  # 3: Facebook Shares

  temp = unique(find_anomalies(df_final['Facebook Shares']))

  df_final = df_final.set_index("Facebook Shares")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()

  # # 3: Creator - # Projects Created

  # temp = unique(find_anomalies(df_final['Creator - # Projects Created']))

  # df_final = df_final.set_index("Creator - # Projects Created")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # # 3: Creator - # Projects Backed

  # temp = unique(find_anomalies(df_final['Creator - # Projects Backed']))

  # df_final = df_final.set_index("Creator - # Projects Backed")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # # 3: # Images

  # temp = unique(find_anomalies(df_final['# Images']))

  # df_final = df_final.set_index("# Images")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # 3: # Words (Description)

  temp = unique(find_anomalies(df_final['# Words (Description)']))

  df_final = df_final.set_index("# Words (Description)")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()

  # 3: # Words (Risks and Challenges)

  temp = unique(find_anomalies(df_final['# Words (Risks and Challenges)']))

  df_final = df_final.set_index("# Words (Risks and Challenges)")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()

  # # 3: Currency

  # temp = unique(find_anomalies(df_final['Currency']))

  # df_final = df_final.set_index("Currency")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # # 3: Top Category

  # temp = unique(find_anomalies(df_final['Top Category']))

  # df_final = df_final.set_index("Top Category")
  # df_final = df_final.drop(temp, axis = 0)

  # df_final = df_final.reset_index()

  # 3: Category

  temp = unique(find_anomalies(df_final['Category']))

  df_final = df_final.set_index("Category")
  df_final = df_final.drop(temp, axis = 0)

  df_final = df_final.reset_index()


  print('ROUND ', i+1)
  print('Number of rows left in the dataset: ', len(df_final))

df_final.corr()

#          Id	     Updates	Comments	Rewards	     Goal	   Pledged	Backers	  Duration in Days	Facebook Friends	Facebook Shares	Creator - # Projects Created	Creator - # Projects Backed	# Videos	# Images	# Words (Description)	# Words (Risks and Challenges)	# FAQs	 State	   Currency	Top Category	Category	Facebook Connected	Has Video	Creator Website
# State	0.007263	0.321812	0.054839	0.189719	-0.022267	0.113073	0.175754	  -0.141144	        -0.017840	         0.101963	         0.075042	                     -0.134050	            0.000885	0.108819	0.091014	                  0.000970	               0.119223	1.000000	-0.060118	  0.070160	  0.022665	     -0.019657	    -0.154450	   0.072659

#       Category	Top Category	Currency	# Words (Risks and Challenges)	# Words (Description)	# Images	Creator - # Projects Backed	Creator - # Projects Created	Facebook Shares	Facebook Friends	Rewards	Duration in Days	Goal	     Id	    Updates	  Comments	Pledged	  Backers	  # Videos	# FAQs	   State	Facebook Connected	Has Video	Creator Website
# State	0.027558	 0.054817	    0.016318         	0.036073	                   0.091764	        0.047253	     -0.126482	                   0.044300	                 0.414323     	-0.024677	     0.181676	   -0.148526	 -0.272885	0.010582	0.291714	0.087030	0.312728	0.307075	0.024033	0.080122	1.000000	  -0.026149	      -0.161105	   0.082084

#       Category	# Words (Description)	Facebook Shares	Facebook Friends	Duration in Days	 Goal	     Id	    Updates	  Comments	Rewards	  Pledged	  Backers	Creator - # Projects Created	Creator - # Projects Backed	# Videos	# Images	# Words (Risks and Challenges)	# FAQs	   State     	Currency	Top Category	Facebook Connected	Has Video	Creator Website
# State	0.035199	     0.112048	           0.400310       	-0.020940	         -0.146176	-0.250254	0.007556	0.311459	0.058281	0.186232	0.301187	0.278962      	0.071366                 	-0.132131	              0.003779	0.097313          	0.003943	            0.107723	1.000000	 -0.056044	0.067176	       -0.022404	     -0.151985	  0.081088

#       Category	# Words (Risks and Challenges)	# Words (Description)	Facebook Shares	Facebook Friends	Duration in Days	Goal    Id     	Updates	  Comments	Rewards	  Pledged	         Backers	Creator - # Projects Created	Creator - # Projects Backed	# Videos	# Images	# FAQs	   State	    Currency	Top Category	Facebook Connected	   Has Video	Creator Website
# State	0.032007     	      0.049016	                  0.117600	         0.428289	         -0.023935	     -0.143437	-0.252973	0.010759	0.297318	0.043654	0.191793	0.311691	      0.281456	                 0.068097	             -0.131892	        0.028784	0.096580	0.097025	1.000000	 -0.063162	  0.066835	       -0.025249	      -0.164068	   0.089204

"""# **Implementing Classifier**"""

a = df_final['Rewards'].values
b = df_final['Goal'].values
c = df_final['Duration in Days'].values
d = df_final['Facebook Friends'].values
e = df_final['Facebook Shares'].values
f = df_final['Creator - # Projects Created'].values
g = df_final['Creator - # Projects Backed'].values
h = df_final['# Videos'].values
i = df_final['# Images'].values
j = df_final['# Words (Description)'].values
k = df_final['# Words (Risks and Challenges)'].values
l = df_final['# FAQs'].values
m = df_final['Currency'].values
n = df_final['Top Category'].values
o = df_final['Category'].values
p = df_final['Facebook Connected'].values
q = df_final['Has Video'].values
r = df_final['Creator Website'].values

X = np.array([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r])
X = X.transpose()
print(X.shape)

np.savetxt("kickstarter_content_inputs.csv", X, delimiter=",")
!cp "/content/kickstarter_content_inputs.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_inputs.csv"

y_temp = df_final['State'].values
y = np.array([y_temp])
y = y.transpose()
y = y.ravel()
print(y.shape)

np.savetxt("kickstarter_content_labels.csv", y, delimiter=",")
!cp "/content/kickstarter_content_labels.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_labels.csv"

"""# ***Generating a csv file of all the final values to be used***"""

data_final = {'Rewards': a, 'Goal': b, 'Duration in Days': c, 'Facebook Friends': d, 'Facebook Shares': e, 
'Creator - # Projects Created': f, 'Creator - # Projects Backed': g, '# Videos': h, '# Images': i, '# Words (Description)': j, '# Words (Risks and Challenges)': k,
'# FAQs': l, 'Currency': m, 'Top Category': n, 'Category': o, 'Facebook Connected': p, 'Has Video': q, 'Creator Website': r, 'State': y_temp }

data_final_lr = {'Rewards': a, 'Pledged': df_final['Pledged'].values, 'Backers': df_final['Backers'].values, 'Goal': b, 'Duration in Days': c, 'Facebook Friends': d, 'Facebook Shares': e, 
'Creator - # Projects Created': f, 'Creator - # Projects Backed': g, '# Videos': h, '# Images': i, '# Words (Description)': j, '# Words (Risks and Challenges)': k,
'# FAQs': l, 'Currency': m, 'Top Category': n, 'Category': o, 'Facebook Connected': p, 'Has Video': q, 'Creator Website': r, 'State': y_temp }

df_array_final = pd.DataFrame(data_final)
df_array_final_sample = df_array_final.head(1000)

df_array_final_lr = pd.DataFrame(data_final_lr)
df_array_final_lr_sample = df_array_final_lr.head(1000)

df_array_final_lr.to_csv (r'kickstarter_content_final_lr_header.csv', index = False, header=True)
df_array_final_lr_sample.to_csv (r'kickstarter_content_final_lr_sample_header.csv', index = False, header=True)

df_array_final.to_csv (r'kickstarter_content_final.csv', index = False, header=False)
df_array_final_sample.to_csv (r'kickstarter_content_final_sample.csv', index = False, header=False)

df_array_final.to_csv (r'kickstarter_content_final_header.csv', index = False, header=True)
df_array_final_sample.to_csv (r'kickstarter_content_final_sample_header.csv', index = False, header=True)

data_final

!cp "/content/kickstarter_content_final.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_final.csv"
!cp "/content/kickstarter_content_final_sample.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_final_sample.csv"

!cp "/content/kickstarter_content_final_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_final_header.csv"
!cp "/content/kickstarter_content_final_sample_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_final_sample_header.csv"

!cp "/content/kickstarter_content_final_lr_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_final_lr_header.csv"
!cp "/content/kickstarter_content_final_lr_sample_header.csv" "/content/gdrive/My Drive/BE Project/Datasets/kickstarter-content-info/kickstarter_content_final_lr_sample_header.csv"